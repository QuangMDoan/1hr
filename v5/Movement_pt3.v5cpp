{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor LeftDriveSmart = motor(PORT1, ratio18_1, false);\nmotor RightDriveSmart = motor(PORT10, ratio18_1, true);\ninertial DrivetrainInertial = inertial(PORT2);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainInertial, 319.19, 320, 40, mm, 1);\n\nmotor armMotor = motor(PORT8, ratio18_1, false);\n\nmotor clawMotor = motor(PORT18, ratio18_1, false);\n\nbumper rearBumper = bumper(Brain.ThreeWirePort.A);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\nbool vexcode_initial_drivetrain_calibration_completed = false;\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  DrivetrainInertial.calibrate();\n  while (DrivetrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n  vexcode_initial_drivetrain_calibration_completed = true;\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\nvoid vexcodeInit() {\n\n  // Calibrate the Drivetrain\n  calibrateDrivetrain();\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\nconst int d1 = 303;\nconst int d2 = 1240;\nconst int d3 = 260;\nconst int d4 = 210;\nconst int d5 = 1040;\nconst int d6 = 300;\nconst int d7 = 1040;\n\nvoid pickOrange(){\n  // drive distance that changes pick up of orange\n  Drivetrain.driveFor(reverse, 150, mm);\n  Drivetrain.turnToHeading(0, degrees, 15, velocityUnits::pct);\n  armMotor.spinFor(reverse, 350, degrees);\n  Drivetrain.driveFor(forward, d2, mm);\n  clawMotor.spinToPosition(-230, degrees);\n  Drivetrain.driveFor(forward, d3, mm);\n  clawMotor.spinToPosition(0, degrees);\n}\n\nvoid dropOrange(){\n  //drives back to base\n  Drivetrain.driveFor(reverse, d2+d3-30, mm);\n  Drivetrain.turnToHeading(-90, degrees, 15, velocityUnits::pct);\n  Drivetrain.driveFor(forward, d4, mm);\n  // spins arm out\n  armMotor.setStopping(hold);\n  armMotor.setTimeout(3, seconds);\n  armMotor.spinFor(forward, 180, degrees);\n  clawMotor.spinToPosition(-120, degrees);\n  armMotor.spinFor(reverse, 180, degrees);\n  Drivetrain.driveFor(reverse, d4, mm);\n}\n\nvoid pickCat(){\n  Drivetrain.driveFor(forward, d1, mm);\n  Drivetrain.turnToHeading(0, degrees, 15, velocityUnits::pct);\n  // drives forward to pick up cat what to change to get aligned with the cat\n  Drivetrain.driveFor(forward, d5, mm);\n  Drivetrain.turnToHeading(-90, degrees, 15, velocityUnits::pct);\n  clawMotor.spinToPosition(-240, degrees);\n  // amount goes forward to pick up cat\n  Drivetrain.driveFor(forward, d6, mm);\n  clawMotor.spinToPosition(0, degrees);\n  Drivetrain.driveFor(reverse, d6, mm);\n  armMotor.spinFor(forward, 180, degrees);\n}\n\nvoid dropCat(){\n  // gets out of where cat was\n  Drivetrain.turnToHeading(0, degrees, 15, velocityUnits::pct);\n  // drives to get to zone to drop but not too far that it falls off the table\n  Drivetrain.driveFor(reverse, d7,mm);\n  Drivetrain.turnToHeading(-90, degrees, 15, velocityUnits::pct);\n  Drivetrain.driveFor(forward, d4, mm);\n  armMotor.spinFor(forward, 180, degrees);\n  clawMotor.spinToPosition(-120, degrees);\n}\n\nvoid pickAndPlace(){\n  clawMotor.setStopping(hold);\n  clawMotor.setMaxTorque(85, percent);\n  clawMotor.setTimeout(3, seconds);\n  clawMotor.spinFor(forward, 270, degrees);\n  clawMotor.setPosition(0, degrees);\n  Drivetrain.turnToHeading(-90, degrees, 15, velocityUnits::pct);\n  pickCat();\n  dropCat();\n  pickOrange();\n  dropOrange();\n}\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n  // Begin project code\n  thread Thread = thread(pickAndPlace);\n  wait(15, msec);\n  waitUntil(rearBumper.pressing());\n  Brain.programStop();\n}\n","textLanguage":"cpp","robotConfig":[{"port":[1,10,2],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[8],"name":"armMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[18],"name":"clawMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"rearBumper","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}