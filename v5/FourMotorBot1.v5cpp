{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\n\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n#include <vector>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n#define INCH2METERS 25.4/1000.0 \n\nusing namespace vex;\n\nstruct MotorGroup {\n  std::vector<motor> motors;\n\n  void addMotor(motor m){\n    motors.push_back(m);\n  }\n\n  void setSpeed(double x){\n    for(motor m: motors){\n      m.setVelocity(x, percent);\n    }\n  }\n\n  void resetMeters(){\n    for(motor m: motors){\n      m.setPosition(0, turns);\n    }\n  }\n\n  double getRotations() {\n    int n = motors.size();\n    double rotations = 0; \n    for(motor m : motors){\n      rotations += m.position(turns);\n    }\n    return fabs(rotations/n);\n  }   \n\n  void drive(bool driveForward=true){\n    for(motor m: motors){\n      m.spin(driveForward ? forward: reverse);\n    }\n  }\n\n  void stopMotors() {\n    for(motor m: motors){\n      m.setStopping(brake);\n      m.stop();\n    }\n  }\n};\n\nclass MyDriveTrain {\npublic:  \n  double WheelDiameter = 4 * INCH2METERS; \n  double TrackWidth = 14.5 * INCH2METERS;\n\n  void setup(){\n    motor frontRight = motor(PORT2, ratio18_1, true);\n    rightMotorGroup.addMotor(frontRight);\n\n    motor backRight = motor(PORT10, ratio18_1, true);\n    rightMotorGroup.addMotor(backRight);\n\n    leftMotorGroup.addMotor(motor(PORT9, ratio18_1, false));\n    leftMotorGroup.addMotor(motor(PORT1, ratio18_1, false));\n  }\n\n  void setSpeed(double x) {\n    rightMotorGroup.setSpeed(x);\n    leftMotorGroup.setSpeed(x);\n  }\n\n  double getLeftDistanceMeters(){\n    double leftRotations = leftMotorGroup.getRotations();\n    double leftMeters = WheelDiameter * M_PI * leftRotations; \n    Brain.Screen.printAt(50, 100, \"left rotations: %3f, meters: %3f\", leftRotations, leftMeters);\n    return leftMeters;\n  }\n\n  double getRightDistanceMeters(){\n    double rightRotations = leftMotorGroup.getRotations();\n    double leftMeters = WheelDiameter * M_PI * leftRotations; \n    Brain.Screen.printAt(50, 100, \"left rotations: %3f, meters: %3f\", leftRotations, leftMeters);\n    return leftMeters;\n  }\n\n  double getDistanceMeters(){\n    double rightRotations = rightMotorGroup.getRotations();\n    Brain.Screen.printAt(50, 50, \"right rotations: %3f\", rightRotations);\n    double leftRotations = leftMotorGroup.getRotations();\n    Brain.Screen.printAt(50, 100, \"left rotations: %3f\", leftRotations);\n\n    double rotations = (rightRotations + leftRotations)/2;\n    double wheelCircum = WheelDiameter * M_PI; \n    double meters = wheelCircum*rotations; \n    Brain.Screen.printAt(50, 150, \"wheel circum: %3f, meters: %3f\", wheelCircum, meters);\n    return meters;\n  }\n\n  void driveForMeters(double x){\n    leftMotorGroup.resetMeters();\n    rightMotorGroup.resetMeters();\n    Brain.Screen.clearScreen();\n    while(getDistanceMeters() < x) {\n      leftMotorGroup.drive();\n      rightMotorGroup.drive();\n    }\n    leftMotorGroup.stopMotors();\n    rightMotorGroup.stopMotors();\n  }\n\n  void turnForDegrees(double x) {\n    rightMotorGroup.resetMeters();\n    leftMotorGroup.resetMeters();\n    Brain.Screen.clearScreen();\n    double robotCircum = TrackWidth * M_PI;\n\n    while(getDistanceMeters() < fabs(x*robotCircum/(2*360))) {\n      rightMotorGroup.drive(false);\n      leftMotorGroup.drive();\n    }\n  }\n\nprivate:\n  MotorGroup rightMotorGroup;\n  MotorGroup leftMotorGroup;\n};\n\n// Wheel Size: 4 inches \n// Track Width: 14.5 in\n// Wheelbase: 6.5 in\nint main() {\n  vexcodeInit();\n  MyDriveTrain driveTrain;\n  driveTrain.setup();\n  driveTrain.setSpeed(25);\n  driveTrain.driveForMeters(3);\n  wait(1, seconds);\n  driveTrain.turnForDegrees(90);\n  wait(2, seconds);\n  driveTrain.turnForDegrees(90);\n  wait(2, seconds);\n  driveTrain.driveForMeters(3);\n  wait(1, seconds);\n}\n","textLanguage":"cpp","robotConfig":[],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.12","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}