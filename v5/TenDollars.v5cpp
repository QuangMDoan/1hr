{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor LeftDriveSmart = motor(PORT1, ratio18_1, false);\nmotor RightDriveSmart = motor(PORT10, ratio18_1, true);\ninertial DrivetrainInertial = inertial(PORT2);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainInertial, 319.19, 320, 40, mm, 1);\n\nmotor Arm = motor(PORT20, ratio18_1, false);\n\nmotor Claw = motor(PORT18, ratio18_1, false);\n\nbumper RearBumper = bumper(Brain.ThreeWirePort.A);\nbumper ArmBumper = bumper(Brain.ThreeWirePort.B);\ndistance BackDistance = distance(PORT21);\nline CenterLineTracker = line(Brain.ThreeWirePort.F);\noptical ClawOptical = optical(PORT16);\nline LeftLineTracker = line(Brain.ThreeWirePort.C);\nline RightLineTracker = line(Brain.ThreeWirePort.D);\n// AI Vision Color Descriptions\n// AI Vision Code Descriptions\nvex::aivision VisionSensor(PORT12);\n\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\nbool vexcode_initial_drivetrain_calibration_completed = false;\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  DrivetrainInertial.calibrate();\n  while (DrivetrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n  vexcode_initial_drivetrain_calibration_completed = true;\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\nvoid vexcodeInit() {\n\n  // Calibrate the Drivetrain\n  calibrateDrivetrain();\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nvoid raiseArm(int angleDegrees, int timeOutSecs){\n  Arm.setStopping(hold);\n  Arm.setTimeout(timeOutSecs, seconds);\n  Arm.spinToPosition(angleDegrees, degrees);\n}\n\nvoid closeClaw(int timeOutSecs){\n  Claw.setStopping(hold); \n  Claw.setMaxTorque(30, percent); \n  Claw.torque(Nm);\n  Arm.torque(Nm);\n  Claw.setTimeout(timeOutSecs, seconds);\n  Claw.spinFor(forward, 270, degrees);\n  Claw.setPosition(0, degrees);\n}\n\nvoid driveBackwardUntilNearObject(int distanceMm){\n  Drivetrain.drive(reverse);\n  while (BackDistance.objectDistance(mm) > distanceMm) {\n    wait(5, msec);\n  }\n  Drivetrain.stop();\n}\n\nvoid driveUntilBumperPress(bool fwd){\n  if (fwd) {\n    Drivetrain.drive(forward);\n  } else {\n    Drivetrain.drive(reverse);\n  }\n  do {\n    wait(5, msec);\n  } while (!RearBumper.pressing());\n  Drivetrain.stop(brake);\n}\n\nvoid lowerArm() {\n  Arm.spin(reverse);\n  do{\n    wait(5, msec);\n  }while (!ArmBumper.pressing());\n  Arm.stop();\n  Arm.setPosition(0, degrees);\n}\n\nvoid openClaw(int timeOutSecs, int angleDegrees){\n  Claw.setStopping(hold); \n  Claw.setMaxTorque(30, percent); \n  Claw.setTimeout(timeOutSecs, seconds); \n  Claw.spinToPosition(-angleDegrees, degrees);\n}\n\nvoid driveUntilDark(bool fwd, int speedPct, int threshold){\n if(fwd){\n   Drivetrain.drive(forward, speedPct, velocityUnits::pct);\n }else {\n   Drivetrain.drive(reverse, speedPct, velocityUnits::pct);\n }\n do {\n   wait(5, msec);\n }while(CenterLineTracker.value(pct) > threshold)\n  Drivetrain.stop(brake);\n}\n\nvoid driveAround(int secs){\n  Brain.Timer.reset();\n  while(Brain.Timer.value() < secs){\n    Drivetrain.drive(forward, 100, mm); \n    Drivetrain.turnFor(right, 90, degrees, 25, velocityUnits::pct);\n  }\n}\n\nbool nearRedObject(){\n  if(ClawOptical.isNearObject() && ClawOptical.color == red) {\n    return true;\n  }\n  return false; \n}\n\nvoid lineTrackingDrive(int threshold = 60){\n  while (!RearBumper.pressing()) {\n    // if left tracker sees dark, swing turn left\n    if (LeftLineTracker.value(pct) > threshold) {\n      RightDriveSmart.spin(forward, 15, pct);\n      LeftDriveSmart.spin(forward, 5, pct);\n    } else if (CenterLineTracker.value(pct) > threshold) {\n      RightDriveSmart.spin(forard, 15, pct);\n      LeftDriveSmart.spin(forward, 15, pct);\n    } else if (RightLineTracker.value(pct) > threshold) {\n      RightDriveSmart.spin(forward, 5, pct);\n      LeftDriveSmart.spin(forward, 15, pct);\n    } else {\n      RightDriveSmart.spin(forward, 15, pct);\n      LeftDriveSmart.spin(reverse, 15, pct);\n    }\n  }\n}\n\nvoid centerWithVision(int centerFOV = 158, int offsetX = 15){\n  while(true){\n    VisionSensor.takeSnapshot(VisionSensor__SIG_RED); \n\n    if(VisionSensor.largestObject.exists) {\n      if(VisionSensor.largestObject.centerX > centerFOV + offsetX) {\n        RightDriveSmart.spin(reverse, 20, velocityUnits:: pct);\n        LeftDriveSmart.spin(forward, 20, velocityUnits::pct); \n      }\n      else if (VisionSensor.largestObject.centerX < centerFOV - offsetX) {\n        RightDriveSmart.spin(forward, 20, velocityUnits::pct);\n        LeftDriveSmart.spin(reverse, 20, velocityUnits::pct);\n      } else {\n        RightDriveSmart.stop();\n        LeftDriveSmart.stop();\n      }\n    }\n  }\n}\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n  // Begin project code\n  closeClaw(2);\n  raiseArm(50*7, 4);\n  wait(5, seconds);\n  lowerArm();\n}\n\n\n","textLanguage":"cpp","robotConfig":[{"port":[1,10,2],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[20],"name":"Arm","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[18],"name":"Claw","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"RearBumper","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[2],"name":"ArmBumper","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[21],"name":"BackDistance","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{}},{"port":[6],"name":"CenterLineTracker","customName":true,"deviceType":"LineTracker","deviceClass":"line","setting":{},"triportSourcePort":22},{"port":[16],"name":"ClawOptical","customName":true,"deviceType":"Optical","deviceClass":"optical","setting":{}},{"port":[3],"name":"LeftLineTracker","customName":true,"deviceType":"LineTracker","deviceClass":"line","setting":{},"triportSourcePort":22},{"port":[4],"name":"RightLineTracker","customName":true,"deviceType":"LineTracker","deviceClass":"line","setting":{},"triportSourcePort":22},{"port":[12],"name":"VisionSensor","customName":true,"deviceType":"AIVision","deviceClass":"aivision","setting":{"config":"{\"colors\":[],\"codes\":[],\"tags\":false,\"AIObjects\":false,\"AIObjectModel\":[\"Ball(Blue)\",\"Ball(Green)\",\"Ball(Red)\",\"Ring(Blue)\",\"Ring(Green)\",\"Ring(Red)\",\"Cube(Blue)\",\"Cube(Green)\",\"Cube(Red)\"]}","isConfigured":"false"}}],"slot":1,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.10","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}