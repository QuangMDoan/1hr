{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor LeftDriveSmart = motor(PORT1, ratio18_1, false);\nmotor RightDriveSmart = motor(PORT10, ratio18_1, true);\ninertial DrivetrainInertial = inertial(PORT2);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainInertial, 319.19, 320, 40, mm, 1);\n\nmotor armMotor = motor(PORT20, ratio18_1, false);\n\nmotor clawMotor = motor(PORT18, ratio18_1, false);\n\nbumper rearBumper = bumper(Brain.ThreeWirePort.A);\n// AI Vision Color Descriptions\naivision::colordesc FrontAiVision__OrangeBall(1, 226, 52, 60, 7, 0.2);\n// AI Vision Code Descriptions\nvex::aivision FrontAiVision(PORT12, FrontAiVision__OrangeBall);\n\ndistance BackDistance = distance(PORT21);\ncontroller Controller1 = controller(primary);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\nbool vexcode_initial_drivetrain_calibration_completed = false;\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  DrivetrainInertial.calibrate();\n  while (DrivetrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n  vexcode_initial_drivetrain_calibration_completed = true;\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\nvoid vexcodeInit() {\n\n  // Calibrate the Drivetrain\n  calibrateDrivetrain();\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // check the ButtonL1/ButtonL2 status to control clawMotor\n      if (Controller1.ButtonL1.pressing()) {\n        clawMotor.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        clawMotor.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        clawMotor.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control armMotor\n      if (Controller1.ButtonR1.pressing()) {\n        armMotor.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        armMotor.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        armMotor.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n#include <cmath>\n#include <algorithm>\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\nconst int d1 = 303;\nconst int d2 = 1200;\nconst int d3 = 260;\nconst int d4 = 260;\nconst int d5 = 1040;\nconst int d6 = 300;\nconst int d7 = 1040;\n\nstruct WheelSpeeds {\n  double leftSp = 0.0; \n  double rightSp = 0.0;\n};\n\nvoid grabObject(int dist){\n  clawMotor.spinToPosition(-100, degrees);\n  // amount goes forward to pick up object\n  Drivetrain.driveFor(forward, dist, mm);\n  clawMotor.spinToPosition(0, degrees);\n  Drivetrain.driveFor(reverse, dist, mm);\n}\n\nvoid dropPiece(){\n  Drivetrain.turnToHeading(-120, degrees, 15, velocityUnits::pct);\n  Drivetrain.driveFor(forward, d4, mm);\n  // spins arm out\n  armMotor.setStopping(hold);\n  armMotor.setTimeout(3, seconds);\n  armMotor.spinFor(forward, 60, degrees);\n  clawMotor.spinToPosition(-100, degrees);\n}\n\nvoid closeClaw(){\n  clawMotor.setStopping(hold);\n  clawMotor.setMaxTorque(80, percent);\n  clawMotor.setTimeout(3, seconds);\n  clawMotor.spinFor(forward, 270, degrees);\n  clawMotor.setPosition(0, degrees);\n}\n\nvoid pickOrange(){\n  armMotor.setStopping(hold);\n  armMotor.setTimeout(3, seconds);\n  armMotor.spinToPosition(60, degrees);\n  grabObject(150);\n  Drivetrain.turnToHeading(0, degrees);\n  Drivetrain.drive(reverse);\n  waitUntil(BackDistance.objectDistance(mm) < 150);\n  Drivetrain.stop();\n  dropPiece();\n}\n\nvoid pickAndPlace(){\n  // closeClaw();\n  // Drivetrain.turnToHeading(-90, degrees, 15, velocityUnits::pct);\n  // pick1stPiece();\n  // drop1stPiece();\n  // pick2ndPiece();\n  // drop2ndPiece();\n  Drivetrain.drive(reverse, 30, velocityUnits::pct);\n  waitUntil(BackDistance.objectDistance(mm) < 150);\n  Drivetrain.stop(brake);\n}\n\nstruct WheelSpeeds arcadeDrive(double xSpeed, double zRotation, bool squareInputs = true) {\n  if (squareInputs){\n    if (xSpeed < 0) {\n      xSpeed = xSpeed * xSpeed * -1.0;\n    } else {\n      xSpeed = xSpeed * xSpeed; \n    }\n\n    if (zRotation < 0) {\n      zRotation = zRotation * zRotation * -1.0;\n    } else {\n      zRotation = zRotation * zRotation; \n    }\n  }\n\n  double leftSpeed = xSpeed - zRotation; \n  double rightSpeed = xSpeed + zRotation; \n\n  double greaterInput = std::max(std::abs(xSpeed), std::abs(zRotation));\n  double lesserInput = std::min(std::abs(xSpeed), std::abs(zRotation));\n\n  if(greaterInput < 0.01){\n    WheelSpeeds speed{};\n    return speed;\n  }\n\n  double saturatedInput = (greaterInput+lesserInput) / greaterInput; \n  leftSpeed /= saturatedInput; \n  rightSpeed /= saturatedInput; \n\n  WheelSpeeds speed{}; \n  speed.leftSp = leftSpeed; \n  speed.rightSp = rightSpeed; \n  return speed; \n}\n\nvoid driveUntilPick(int turnLeftLoc, int turnRightLoc){\n  bool found = false; \n\n  Drivetrain.setTurnVelocity(15, percent);\n  Drivetrain.setDriveVelocity(15, percent); \n\n  while(!found){\n    FrontAiVision.takeSnapshot(FrontAiVision__OrangeBall);\n\n    if(FrontAiVision.objectCount > 0){\n      int cx = FrontAiVision.objects[0].centerX; \n      int w = FrontAiVision.objects[0].width; \n\n      // printf(\"width: %d\\n\", w);\n      // printf(\"center x: %d\\n\", cx);\n      // printf(\"object id: %ld\\n\", FrontAiVision.objects[0].id);\n      struct WheelSpeeds speed{}; \n      if(w > 80){\n        Drivetrain.stop();\n        found = true;\n      }\n      else if (cx < turnLeftLoc){\n        double turnAmt = std::abs(turnLeftLoc-cx)/(turnLeftLoc*1.0);\n        speed = arcadeDrive(0.5, turnAmt, true);\n      }\n      else if (cx > turnRightLoc){\n        double turnAmt = std::abs(cx - turnRightLoc)/(turnRightLoc*1.0);\n        speed = arcadeDrive(0.5, turnAmt*-1.0, true);\n      }else {\n        Drivetrain.drive(forward);\n      }\n\n      int left_spin_sp = (int) (speed.leftSp*100);\n      LeftDriveSmart.spin(speed.leftSp > 0 ? forward: reverse, left_spin_sp, velocityUnits::pct);\n\n      int right_spin_sp = (int) (speed.rightSp*100);\n      RightDriveSmart.spin(speed.rightSp > 0 ? forward: reverse, right_spin_sp, velocityUnits::pct);\n\n      // printf(\"left_spin_sp: %d\\n\", left_spin_sp);\n      // printf(\"right_spin_sp: %d\\n\", right_spin_sp);  \n    }else {\n      // printf(\"FromAIVision.object Count = %d... \\n\", 0);\n      Drivetrain.drive(forward);\n    }\n  }\n}\n\nint main() {\n  vexcodeInit();\n\n  // driveUntilPick(140, 180);\n  // pickOrange();\n\n  while(true){\n    double xSpeed = Controller1.Axis3.position()/100.0f;\n    double zRotation = -Controller1.Axis4.position()/100.0f;\n\n    // if (std::abs(xSpeed) > 0.05 || std::abs(zRotation) > 0.05) {\n    //   printf(\"xSpeed = %.3f \\n\", xSpeed);\n    //   printf(\"zRotation = %.3f \\n\", zRotation);\n    // }\n\n    if(std::abs(xSpeed) > 0.05){\n      printf(\"xSpeed = %.3f\\n\", xSpeed);\n    }else {\n      xSpeed = 0;\n    }\n    if (std::abs(zRotation) > 0.05) {\n      printf(\"zRotation = %.3f\\n\", zRotation);\n    } else {\n      zRotation = 0.0;\n    }\n\n    struct WheelSpeeds speed = arcadeDrive(xSpeed, zRotation);\n\n    if(std::abs(speed.leftSp)){\n      speed.leftSp = 0;\n    }\n    if(std::abs(speed.rightSp) < 0.05){\n      speed.rightSp = 0;\n    }\n\n    int left_spin_sp = (int) (speed.leftSp*100);\n    LeftDriveSmart.spin(speed.leftSp > 0 ? forward: reverse, std::abs(left_spin_sp)*0.8, velocityUnits::pct);\n\n    int right_spin_sp = (int) (speed.rightSp*100);\n    RightDriveSmart.spin(speed.rightSp > 0 ? forward: reverse, std::abs(right_spin_sp)*0.8, velocityUnits::pct);\n\n    if(Controller1.ButtonR1.pressing()){\n      armMotor.spin(forward, 40, percent);\n    } else if (Controller1.ButtonR2.pressing()){\n      armMotor.spin(reverse, 40, percent);\n    } else {\n      armMotor.stop(hold);\n    }\n\n    if(Controller1.ButtonL1.pressing()){\n      clawMotor.spin(forward, 40, percent);\n    } else if(Controller1.ButtonL2.pressing()){\n      clawMotor.spin(reverse, 40, percent);\n    } else {\n      clawMotor.stop(hold);\n    }\n  }\n  \n  Drivetrain.stop(brake);\n  Brain.programStop();\n}\n","textLanguage":"cpp","robotConfig":[{"port":[1,10,2],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[20],"name":"armMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[18],"name":"clawMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"rearBumper","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[12],"name":"FrontAiVision","customName":true,"deviceType":"AIVision","deviceClass":"aivision","setting":{"config":"{\"colors\":[{\"id\":1,\"name\":\"OrangeBall\",\"nameValid\":\"Valid\",\"lastValidName\":\"OrangeBall\",\"red\":226.29172510518933,\"green\":52.165848527349226,\"blue\":59.71143057503506,\"hueRange\":7,\"saturationRange\":0.2}],\"codes\":[],\"tags\":false,\"AIObjects\":false,\"AIObjectModel\":[\"Ball(Blue)\",\"Ball(Green)\",\"Ball(Red)\",\"Ring(Blue)\",\"Ring(Green)\",\"Ring(Red)\",\"Cube(Blue)\",\"Cube(Green)\",\"Cube(Red)\"],\"AIModelMetadata\":{\"id\":0,\"version\":1,\"name\":\"Classroom Objects\"},\"aiModelDropDownValue\":\"Classroom Objects\"}","isConfigured":"false"},"triportSourcePort":22},{"port":[21],"name":"BackDistance","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"clawMotor","leftDir":"false","right":"armMotor","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.10","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}