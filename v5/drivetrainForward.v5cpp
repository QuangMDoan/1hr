{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor LeftDriveSmart = motor(PORT1, ratio18_1, false);\nmotor RightDriveSmart = motor(PORT10, ratio18_1, true);\ninertial DrivetrainInertial = inertial(PORT2);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainInertial, 319.19, 320, 40, mm, 1);\n\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\nbool vexcode_initial_drivetrain_calibration_completed = false;\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  DrivetrainInertial.calibrate();\n  while (DrivetrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n  vexcode_initial_drivetrain_calibration_completed = true;\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\nvoid vexcodeInit() {\n\n  // Calibrate the Drivetrain\n  calibrateDrivetrain();\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n\n\n/*\n  Plan: \n  1: make a constant d(gapDistance) for gap distance between delivery spots\n  2: drive to spot 1 2d away\n  3: wait for 2 seconds\n  4: drive to start\n  5: drive to spot 2 d away \n  6: wait 2 seconds \n  7: drive to start \n  8: drive to spot 4 2d away\n  9: wait for 2 seconds\n  10: drive to start\n  11: drive to spot 3 d away\n  12: wait for 2 seconds\n  13: drive to start\n*/\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\nconst int velocityPct = 20;\nconst int gapDistance = 300;\n\nvoid delivery12(){\n  Drivetrain.driveFor(reverse, gapDistance*2, mm, velocityPct, velocityUnits::pct);\n  wait(2, seconds);\n\n  Drivetrain.driveFor(forward, gapDistance*2, mm, velocityPct, velocityUnits::pct);\n\n  Drivetrain.driveFor(reverse, gapDistance, mm, velocityPct, velocityUnits::pct);\n  wait(2, seconds);\n\n  Drivetrain.driveFor(forward, gapDistance, mm, velocityPct, velocityUnits::pct);\n}\n\nvoid delivery34(){\n  Drivetrain.driveFor(forward, gapDistance*2, mm, velocityPct, velocityUnits::pct);\n  wait(2, seconds);\n\n  Drivetrain.driveFor(reverse, gapDistance*2, mm, velocityPct, velocityUnits::pct);\n\n  Drivetrain.driveFor(forward, gapDistance, mm, velocityPct, velocityUnits::pct);\n  wait(2, seconds);\n\n  Drivetrain.driveFor(reverse, gapDistance, mm, velocityPct, velocityUnits::pct);\n}\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n  // Begin project code\n  //Drivetrain.driveFor(forward, 500, mm);\n  delivery12();\n  delivery34();\n}\n","textLanguage":"cpp","robotConfig":[{"port":[1,10,2],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"}}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}